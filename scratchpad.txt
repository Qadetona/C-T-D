
const app = Elm.Main.embed(node, {
    api: 'Client',
    hostname: '',
});

app.ports.startTimer.subscribe((int) => {
    setTimeout(() => {
        app.ports.timeout.send(int);
    }, 10000);
});


function doinitializeGame() 
{

    var outgoing = new Object();

    outgoing.msg = "INITIALIZE";
    outgoing.body = new Object();
    
    outgoing.body.newLine = null;
    outgoing.body.heading = "Player 1";
    outgoing.body.message = "Awaiting Player 1's Move";

    clickedNode = null;
    turn = 1;
    console.log(outgoing);

    return outgoing;
}

function theLine(start, end) 
{

    var newLine = new Object();
    newLine.start = start;
    newLine.end = end;

    console.log(newLine);
    return newLine;
};

function thePoint (x,y) 
{

    var newPoint = new Object();
    newPoint.x = x;
    newPoint.y = y;

    console.log(newPoint);
    return newPoint;
};

function isOctilinear()
        {
            if ((start.x == end.x || start.y == end.y || Math.Abs(start.x - end.x) == Math.Abs(start.y - end.y)) && (!(start.x == end.x && start.y == end.y)))
            {            
                return true;
            }
            else
            {
                return false;
            }
        }

function doNodeClicked(incomingBody) 
{
    //Create an object to use as outgoing
    var outgoing = new Object();

    outgoing.body = new Object();

if (gameOver == true)
{
     outgoing.msg = "INVALID_START_NODE";
     outgoing.body.heading = "Game Over";
     outgoing.body.message = currentPlayer(currentPlayerIsOne) + " Wins!";
}

else if (currentSelection == null)
{
    if (counterTotalValidMoves < 1) 
    {
       
         if ((incomingBody.x == nodeFirstMove.x) && (incomingBody.y == nodeFirstMove.y) || (incomingBody.x == nodeLastMove.x) && (incomingBody.y == nodeLastMove.y)) 
         {

         nodeOrigination = (incomingBody.x == nodeFirstMove.x) && (incomingBody.y == nodeFirstMove.y) ? "nodeEndpointA" : "nodeEndpointB";
         
         //Valid Move
         outgoing.msg = "VALID_START_NODE";

         outgoing.body.newLine = null;
         outgoing.body.heading = "Player " + turn;
         outgoing.body.message = "Select a second node to complete the line.";
         //Now we set the current selection to the incoming value
         currentSelection = incomingBody;
         }
    }
     
    

}

//subsequent moves


